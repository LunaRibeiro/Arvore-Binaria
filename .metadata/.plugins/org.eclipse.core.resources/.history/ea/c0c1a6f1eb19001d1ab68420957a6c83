package document.assembler;

public class Tree<TYPE extends Comparable> {

	private Element<TYPE> branch;
	
	public Tree() {
		this.branch = null;
	}
	
	public void add(TYPE value) {
		Element<TYPE> newElement = new Element<TYPE>(value);
		
		if(branch == null) {
			this.branch = newElement;
		}else {
			Element<TYPE> actualBranch = this.branch;
			while(true) {
				/*Método compareTo
				 * 1 = o valor é maior
				 * 0 = o valor é igual
				 * -1 = o valor é menor
				 */
				if(newElement.getValue().compareTo(actualBranch.getValue()) == -1){
					if(actualBranch.getLeft() != null) {
						actualBranch = actualBranch.getLeft();
					}else {
						actualBranch.setLeft(newElement);
						break;
					}
				}else { //se for um valor maior ou igual ao da branch
					if(actualBranch.getRight() != null) {
						actualBranch = actualBranch.getRight();
					}else {
						actualBranch.setRight(newElement);
						break;
					}
				}
			}
		}
	}
	
	public void order(Element<TYPE> actual) {
		if(actual != null) {
		order(actual.getLeft());
		System.out.println(actual.getValue());
		order(actual.getRight());
	
		}
	}
}
